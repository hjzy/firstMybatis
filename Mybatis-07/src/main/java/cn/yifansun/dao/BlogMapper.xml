<?xml version="1.0" encoding="UTF-8" ?>
<!--接口实现类由原来的impl转换为一个mapper文件-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace=绑定一个对应的Dao/Mapper接口-->
<mapper namespace="cn.yifansun.dao.BlogMapper">

    <insert id="addBlog" parameterType="cn.yifansun.pojo.Blog">
        insert into blog (id, title, author, create_time, views)
        values (#{id},#{title},#{author},#{createTime},#{views});
    </insert>
    <!--需求1：
根据作者名字和博客名字来查询博客！
如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询
select * from blog where title = #{title} and author = #{author}
-->
    <select id="queryBlogIf" parameterType="map" resultType="cn.yifansun.pojo.Blog">
        select * from blog
<!--    where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。
        而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。-->
        <where>
            <if test="title != null">
                title = #{title}
            </if>
            <if test="author != null">
                and author = #{author}
            </if>
        </where>
    </select>

<!--    有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。
        针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。-->
<!--    还是上面的例子，但是策略变为：
        传入了 “title” 就按 “title” 查找，
        传入了 “author” 就按 “author” 查找的情形。
        若两者都没有传入，就返回标记为 featured 的 BLOG-->
    <select id="queryBlogChoose" parameterType="map" resultType="cn.yifansun.pojo.Blog">
        select * from blog
        <where>
            <choose>
                <when test="title != null">
                    title = #{title}
                </when>
                <when test="author != null">
                    author = #{author}
                </when>
                <otherwise>
                    views = #{views}
                </otherwise>
            </choose>
        </where>
    </select>

    <!--注意set是用的逗号隔开-->
    <update id="updateBlog" parameterType="map">
        update blog
        <set>
            <if test="title != null">
                title = #{title},
            </if>
            <if test="author != null">
                author = #{author}
            </if>
        </set>
        where id = #{id};
    </update>



    <select id="queryBlogForeach" parameterType="map" resultType="cn.yifansun.pojo.Blog">
        select * from blog
        <where>
            <!--
            collection:指定输入对象中的集合属性
            item:每次遍历生成的对象
            open:开始遍历时的拼接字符串
            close:结束时拼接的字符串
            separator:遍历对象之间需要拼接的字符串
            select * from blog where 1=1 and (id=1 or id=2 or id=3)
          -->
            <foreach collection="ids"  item="id" open="and (" close=")" separator="or">
                id=#{id}
            </foreach>
        </where>
    </select>
</mapper>